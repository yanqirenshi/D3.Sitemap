{"version":3,"sources":["data/NODE_DATA.js","data/EDGE_DATA.js","pages/SitemapGraph.js","pages/PageExample.js","App.js","serviceWorker.js","index.js"],"names":["NODE_DATA","type","label","contents","position","x","y","font","size","color","w","h","children","id","link","url","EDGE_DATA","from","to","stroke","width","SitemapGraph","props","useState","D3Sitemap","init","svg","selector","d3sitemap","useEffect","data","nodes","edges","style","root","background","height","operators","marginTop","PageExample","marginLeft","marginRight","graph_area","marginBottom","h1","fontSize","fontWeight","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAsDeA,EAtDG,CACd,CACIC,KAAM,OACNC,MAAO,CACHC,SAAU,UACVC,SAAU,CAAEC,EAAG,GAAIC,EAAG,IACtBC,KAAM,CAAEC,KAAM,GAAIC,MAAO,YAE7BD,KAAM,CAAEE,EAAE,IAAKC,EAAE,KACjBP,SAAU,CAAEC,EAAE,EAAGC,EAAE,GACnBM,SAAU,CACN,CACIX,KAAM,OACNC,MAAO,CACHC,SAAU,UACVC,SAAU,CAAEC,EAAG,GAAIC,EAAG,IACtBC,KAAM,CAAEC,KAAM,GAAIC,MAAO,YAE7BD,KAAM,CAAEE,EAAE,IAAKC,EAAE,KACjBP,SAAU,CAAEC,EAAE,IAAKC,EAAE,KACrBM,SAAU,GACVC,GAAI,EACJC,KAAM,CAAEC,IAAK,8BAGrBF,GAAI,GAER,CACIZ,KAAM,OACNC,MAAO,CACHC,SAAU,UACVC,SAAU,CAAEC,EAAG,GAAIC,EAAG,IACtBC,KAAM,CAAEC,KAAM,GAAIC,MAAO,YAE7BD,KAAM,CAAEE,EAAE,IAAKC,EAAE,KACjBP,SAAU,CAAEC,EAAE,IAAKC,EAAE,GACrBM,SAAU,CACN,CACIX,KAAM,YACNC,MAAO,CACHC,SAAU,UACVC,SAAU,CAAEC,EAAG,GAAIC,EAAG,IACtBC,KAAM,CAAEC,KAAM,GAAIC,MAAO,YAE7BD,KAAM,CAAEE,EAAE,IAAKC,EAAE,KACjBP,SAAU,CAAEC,EAAE,GAAIC,EAAE,IACpBM,SAAU,GACVC,GAAI,IAGZA,GAAI,ICjBGG,EAjCG,CACd,CACIH,GAAI,IACJI,KAAM,CACFJ,GAAI,EACJT,SAAU,KAEdc,GAAI,CACAL,GAAI,EACJT,SAAU,IAEde,OAAQ,CACJV,MAAO,OACPW,MAAO,MAGf,CACIP,GAAI,IACJI,KAAM,CACFJ,GAAI,EACJT,SAAU,KAEdc,GAAI,CACAL,GAAI,EACJT,SAAU,IAEde,OAAQ,CACJV,MAAO,OACPW,MAAO,OCoBJC,MAzCf,SAAuBC,GAAQ,IAAD,EACNC,oBAAS,IAAIC,KAAYC,KAAK,CAC9CC,IAAK,CACDC,SAAU,iBACVjB,EAAG,KACHC,EAAG,QAJJiB,EADmB,oBAS1BC,qBAAU,WACND,EAAUE,KAAK,CACXC,MAAO/B,EACPgC,MAAOhB,OAIf,IAAMiB,EAAQ,CACVC,KAAM,CACFC,WAAY,UACZf,MAAO,OACPgB,OAAQ,SAEZC,UAAW,CACPC,UAAW,SAInB,OACI,oCACE,yBAAKL,MAAOA,EAAMC,MAChB,yBAAKrB,GAAG,gBACHO,MAAM,SACNgB,OAAO,WAGd,yBAAKH,MAAOA,EAAMI,cCJbE,MAlCf,WACI,IAAMN,EAAQ,CACVC,KAAM,CACFC,WAAY,UACZf,MAAO,SACPoB,WAAY,OACZC,YAAa,QAEjBC,WAAY,CACRJ,UAAW,OACXK,aAAc,QAElBC,GAAI,CACAC,SAAU,OACVC,WAAY,OACZR,UAAW,SAInB,OACI,yBAAKL,MAAOA,EAAMC,MAEhB,6BACE,wBAAID,MAAOA,EAAMW,IAAjB,qBAGF,yBAAKX,MAAOA,EAAMS,YAChB,kBAAC,EAAD,SClBGK,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4f722da1.chunk.js","sourcesContent":["const NODE_DATA = [\n    {\n        type: 'NODE',\n        label: {\n            contents: 'NODE 01',\n            position: { x: 20, y: 20 },\n            font: { size: 16, color: '#333333' },\n        },\n        size: { w:300, h:300 },\n        position: { x:0, y:0 },\n        children: [\n            {\n                type: 'NODE',\n                label: {\n                    contents: 'NODE 03',\n                    position: { x: 20, y: 20 },\n                    font: { size: 16, color: '#333333' },\n                },\n                size: { w:100, h:100 },\n                position: { x:100, y:100 },\n                children: [],\n                id: 3,\n                link: { url: 'https://twitter.com/home' },\n            },\n        ],\n        id: 1,\n    },\n    {\n        type: 'NODE',\n        label: {\n            contents: 'NODE 02',\n            position: { x: 20, y: 20 },\n            font: { size: 16, color: '#333333' },\n        },\n        size: { w:300, h:200 },\n        position: { x:500, y:0 },\n        children: [\n            {\n                type: 'COMPONENT',\n                label: {\n                    contents: 'COPM 01',\n                    position: { x: 20, y: 20 },\n                    font: { size: 16, color: '#333333' },\n                },\n                size: { w:200, h:100 },\n                position: { x:50, y:50 },\n                children: [],\n                id: 4,\n            },\n        ],\n        id: 2,\n    }\n];\n\nexport default NODE_DATA;\n","const EDGE_DATA = [\n    {\n        id: 100,\n        from: {\n            id: 1,\n            position: 270,\n        },\n        to: {\n            id: 2,\n            position: 90,\n        },\n        stroke: {\n            color: '#f00',\n            width: 1.5,\n        },\n    },\n    {\n        id: 101,\n        from: {\n            id: 3,\n            position: 270,\n        },\n        to: {\n            id: 4,\n            position: 90,\n        },\n        stroke: {\n            color: '#00f',\n            width: 1.5,\n        },\n    },\n];\n\nexport default EDGE_DATA;\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport D3Sitemap from '@yanqirenshi/d3.sitemap';\r\n\r\nimport NODE_DATA from '../data/NODE_DATA.js';\r\nimport EDGE_DATA from '../data/EDGE_DATA.js';\r\n\r\nfunction SitemapGraph (props) {\r\n    const [d3sitemap] = useState(new D3Sitemap().init({\r\n        svg: {\r\n            selector: '#sitemap-graph',\r\n            w: 1024,\r\n            h: 333,\r\n        },\r\n    }));\r\n\r\n    useEffect(() => {\r\n        d3sitemap.data({\r\n            nodes: NODE_DATA,\r\n            edges: EDGE_DATA,\r\n        });\r\n    });\r\n\r\n    const style = {\r\n        root: {\r\n            background: '#f3f3f3',\r\n            width: '100%',\r\n            height: '333px',\r\n        },\r\n        operators: {\r\n            marginTop: '11px',\r\n        },\r\n    };\r\n\r\n    return (\r\n        <>\r\n          <div style={style.root}>\r\n            <svg id='sitemap-graph'\r\n                 width='1024px'\r\n                 height='333px' />\r\n\r\n          </div>\r\n          <div style={style.operators}>\r\n          </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SitemapGraph;\r\n","import React, { useState } from 'react';\n\nimport SitemapGraph from './SitemapGraph';\n\nfunction PageExample () {\n    const style = {\n        root: {\n            background: '#ffffff',\n            width: '1024px',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n        },\n        graph_area: {\n            marginTop: '22px',\n            marginBottom: '22px',\n        },\n        h1: {\n            fontSize: '33px',\n            fontWeight: 'bold',\n            marginTop: '11px',\n        },\n    };\n\n    return (\n        <div style={style.root}>\n\n          <div>\n            <h1 style={style.h1}>Example of React</h1>\n          </div>\n\n          <div style={style.graph_area}>\n            <SitemapGraph />\n          </div>\n\n        </div>\n    );\n}\n\nexport default PageExample;\n","import React from 'react';\nimport './App.css';\n\nimport PageExample from './pages/PageExample';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageExample />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}